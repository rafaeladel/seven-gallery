# require 'rails_helper'
#
# # This spec was generated by rspec-rails when you ran the scaffold generator.
# # It demonstrates how one might use RSpec to specify the controller code that
# # was generated by Rails when you ran the scaffold generator.
# #
# # It assumes that the implementation code is generated by the rails scaffold
# # generator.  If you are using any extension libraries to generate different
# # controller code, this generated spec may or may not pass.
# #
# # It only uses APIs available in rails and/or rspec-rails.  There are a number
# # of tools you can use to make these specs even more expressive, but we're
# # sticking to rails and rspec-rails APIs to keep things simple and stable.
# #
# # Compared to earlier versions of this generator, there is very limited use of
# # stubs and message expectations in this spec.  Stubs are only used when there
# # is no simpler way to get a handle on the object needed for the example.
# # Message expectations are only used when there is no simpler way to specify
# # that an instance is receiving a specific message.
#
# module SevenGallery
#   RSpec.describe PhotosController, type: :controller do
#     routes { SevenGallery::Engine.routes }
#     # This should return the minimal set of attributes required to create a valid
#     # Photo. As you add validations to Photo, be sure to
#     # adjust the attributes here as well.
#     let(:valid_photo) {
#       FactoryGirl.create(:valid_photo)
#     }
#
#     let(:invalid_photo) {
#       FactoryGirl.create(:invalid_photo)
#     }
#
#     let(:valid_gallery) {
#       FactoryGirl.create(:valid_gallery)
#     }
#
#     let(:valid_attributes) {
#       FactoryGirl.attributes_for(:valid_photo)
#     }
#
#     let(:invalid_attributes) {
#       FactoryGirl.attributes_for(:invalid_photo)
#     }
#
#     # This should return the minimal set of values that should be in the session
#     # in order to pass any filters (e.g. authentication) defined in
#     # PhotosController. Be sure to keep this updated too.
#     let(:valid_session) { {} }
#
#     describe "GET #index" do
#       it "assigns all photos as @photos" do
#         gallery = valid_gallery
#         photo = valid_photo
#         get :index, {gallery_id: gallery.id}, valid_session
#         expect(assigns(:photos)).to include photo
#       end
#     end
#
#     describe "GET #show" do
#       it "assigns the requested photo as @photo" do
#         photo = valid_photo
#         get :show, {:id => photo.to_param}, valid_session
#         expect(assigns(:photo)).to eq(photo)
#       end
#     end
#
#     describe "GET #new" do
#       it "assigns a new photo as @photo" do
#         get :new, {}, valid_session
#         expect(assigns(:photo)).to be_a_new(Photo)
#       end
#     end
#
#     describe "GET #edit" do
#       it "assigns the requested photo as @photo" do
#         photo = valid_photo
#         get :edit, {:id => photo.to_param}, valid_session
#         expect(assigns(:photo)).to eq(photo)
#
#       end
#     end
#
#     describe "POST #create" do
#       context "with valid params" do
#         it "creates a new Photo" do
#           expect {
#             post :create, {:photo => valid_attributes}, valid_session
#           }.to change(Photo, :count).by(1)
#         end
#
#         it "assigns a newly created photo as @photo" do
#           post :create, {:photo => valid_attributes}, valid_session
#           expect(assigns(:photo)).to be_a(Photo)
#           expect(assigns(:photo)).to be_persisted
#           expect(assigns(:photo)).to be_persisted
#         end
#
#         it "attaches a photo to new photo" do
#           post :create, {:photo => valid_attributes}, valid_session
#           expect(assigns(:photo)).to be_a SevenGallery::Photo
#           expect(assigns(:photo).title).to eq "a photo"
#         end
#
#         it "redirects to the created photo" do
#           post :create, {:photo => valid_attributes}, valid_session
#           expect(response).to redirect_to(Photo.last)
#         end
#       end
#
#       context "with invalid params" do
#         it "assigns a newly created but unsaved photo as @photo" do
#           post :create, {:photo => invalid_attributes}, valid_session
#           expect(assigns(:photo)).to be_a_new(Photo)
#         end
#
#         it "re-renders the 'new' template" do
#           post :create, {:photo => invalid_attributes}, valid_session
#           expect(response).to render_template("new")
#         end
#       end
#     end
#
#     describe "PUT #update" do
#       context "with valid params" do
#         let(:new_attributes) {
#           FactoryGirl.attributes_for(:valid_photo, title: "new_title")
#         }
#
#         it "updates the requested photo" do
#           photo = valid_photo
#           put :update, {:id => photo.to_param, :photo => new_attributes}, valid_session
#           photo.reload
#           expect(photo.title).to eq "new_title"
#         end
#
#         it "assigns the requested photo as @photo" do
#           photo = valid_photo
#           put :update, {:id => photo.to_param, :photo => valid_attributes}, valid_session
#           expect(assigns(:photo)).to eq(photo)
#         end
#
#         it "redirects to the photo" do
#           photo = valid_photo
#           put :update, {:id => photo.to_param, :photo => valid_attributes}, valid_session
#           expect(response).to redirect_to(photo)
#         end
#       end
#
#       context "with invalid params" do
#         it "assigns the photo as @photo" do
#           photo = valid_photo
#           put :update, {:id => photo.to_param, :photo => invalid_attributes}, valid_session
#           expect(assigns(:photo)).to eq(photo)
#         end
#
#         it "re-renders the 'edit' template" do
#           photo = valid_photo
#           put :update, {:id => photo.to_param, :photo => invalid_attributes}, valid_session
#           expect(response).to render_template("edit")
#         end
#       end
#     end
#
#     describe "DELETE #destroy" do
#       it "destroys the requested photo" do
#         photo = valid_photo
#         expect {
#           delete :destroy, {:id => photo.to_param}, valid_session
#         }.to change(Photo, :count).by(-1)
#       end
#
#       it "redirects to the photos list" do
#         photo = valid_photo
#         delete :destroy, {:id => photo.to_param}, valid_session
#         expect(response).to redirect_to(photos_url)
#       end
#     end
#
#   end
# end
